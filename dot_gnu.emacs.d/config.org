#+TITLE: Cass's Emacs Config
#+AUTHOR: Cass Dahle
#+DESCRIPTION: Cass's Personal Emacs Config
#+OPTIONS: toc:2
* TABLE OF CONTENTS :toc:
- [[#packageel][PACKAGE.EL]]
- [[#add-to-load-path][ADD TO LOAD PATH]]
- [[#keybindings][KEYBINDINGS]]
  - [[#general-keybindings][General Keybindings]]
- [[#org-tweaks][ORG TWEAKS]]
  - [[#enable-table-of-contents][Enable Table of Contents]]
  - [[#easy-insert-source-blocks][Easy Insert Source Blocks]]
  - [[#org-bullets][Org Bullets]]
- [[#cosmetics][COSMETICS]]
  - [[#themes][Themes]]
  - [[#dashboard][Dashboard]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#line-spacing][Line Spacing]]
- [[#tools][TOOLS]]
  - [[#company][Company]]
  - [[#lsp][LSP]]
  - [[#ivyswipercounselsmex][Ivy/Swiper/Counsel/Smex]]
  - [[#magit][magit]]
  - [[#vterm][vterm]]
  - [[#highlight-todo][Highlight Todo]]
- [[#paste-image-from-clipboard][Paste Image from Clipboard]]
- [[#sensible-defaults][SENSIBLE DEFAULTS]]
- [[#evil-mode][Evil Mode]]
  - [[#installed-with-package-install][Installed with package-install]]
  - [[#code][Code]]

* PACKAGE.EL
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+end_src

* ADD TO LOAD PATH
#+begin_src emacs-lisp
(add-to-list 'load-path "~/gnu.emacs.d/lisp/")
#+end_src
* KEYBINDINGS
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x i") 'ibuffer)
  (global-set-key (kbd "C-x r") 'counsel-recentf)

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
** General Keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  
  ;; set up 'SPC' as the global leader key
  (general-create-definer my/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (my/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument")))

(my/leader-keys
  "h" '(:ignore t :wk "help")
  "h f" '(describe-function :wk "Describe function")
  "h v" '(describe-variable :wk "Describe variable")
  "h r r" '((lambda () (interactive)
              (load-file "~/.emacs.d/init.el")
              :wk "Reload emacs config"))
  )

(my/leader-keys
  "f" '(:ignore t :wk "Files")
  "f c" '((lambda () (interactive)
            (find-file "~/.emacs.d/config.org")) 
          :wk "Open emacs config.org")
  "f r" '(counsel-recentf :wk "Find recent files")
  )

(my/leader-keys
  "b" '(:ignore t :wk "Bookmarks/Buffers")
  "b b" '(switch-to-buffer :wk "Switch to buffer")
  "b i" '(ibuffer :wk "Ibuffer")
  "b k" '(kill-current-buffer :wk "Kill current buffer")
  "b K" '(kill-some-buffers :wk "Kill multiple buffers")
  "b l" '(list-bookmarks :wk "List bookmarks")
  "b m" '(bookmark-set :wk "Set bookmark")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")
  )

#+end_src
* ORG TWEAKS
** Enable Table of Contents
- Installed toc-org with package-install
#+begin_src emacs-lisp
  (if (require 'toc-org nil t)
      (progn
	(add-hook 'org-mode-hook 'toc-org-mode)

	;; enable in markdown, too
	;;(add-hook 'markdown-mode-hook 'toc-org-mode)
	;;(define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
	)
    (warn "toc-org not found"))
#+end_src
** Easy Insert Source Blocks
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* COSMETICS
** Themes
*** SpaceGray
https://gitlab.com/aimebertrand/timu-spacegrey-theme
#+begin_src emacs-lisp
  (use-package timu-spacegrey-theme
  :ensure t
  :config
  (load-theme 'timu-spacegrey t))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
        :ensure t 
        :init
        (dashboard-setup-startup-hook)
      (setq dashboard-banner-logo-title "Its Emacs Time. Oh yea!")
     (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  )

#+end_src
** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
** Line Spacing
#+begin_src emacs-lisp
(setq-default line-spacing 0.12)
#+end_src

* TOOLS
** Company
- Installed with package-install
#+begin_src emacs-lisp
(use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** LSP
- lsp-mode: installed with package-install
- lsp-ui: installed with package-install
- which-key: installed with package-install
#+begin_src emacs-lisp
(use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (XXX-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  ;;(use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
      :config
      (which-key-mode))
#+end_src

*** Python LSP
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred

#+end_src


** Ivy/Swiper/Counsel/Smex
- Installed all  with package-install
#+begin_src emacs-lisp
  (use-package ivy)
  (use-package swiper)
  (ivy-mode)
  (define-key ivy-minibuffer-map (kbd "<ESC>") 'minibuffer-keyboard-quit)  ;; one esc to exit
  (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)   ;;one esc to exit
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)    ;; gets rid of annoying '^'
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  ;;more ivy stuff
  (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
       ivy-rich-switch-buffer-align-virtual-buffer t
       ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
				   'ivy-rich-switch-buffer-transformer))

  ;;smex
  (use-package smex)
  (require 'smex)

#+end_src

** magit
- installed through package install
#+begin_src emacs-lisp
  (use-package magit)


#+end_src
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
*** vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle)
  (global-set-key (kbd "C-`") 'vterm-toggle)
  ;;(global-set-key [C-f2] 'vterm-toggle-cd)

#+end_src
** Highlight Todo
#+begin_src emacs-lisp
  (use-package hl-todo)
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#FF4500")
          ("STUB"   . "#1E90FF")))
  (keymap-set hl-todo-mode-map "C-c p" #'hl-todo-previous)
  (keymap-set hl-todo-mode-map "C-c n" #'hl-todo-next)
  (keymap-set hl-todo-mode-map "C-c o" #'hl-todo-occur)
  (keymap-set hl-todo-mode-map "C-c i" #'hl-todo-insert)
#+end_src
* Paste Image from Clipboard
note use Ctrl and scroll to resize images
#+begin_src emacs-lisp
    ;; inspired by https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/

(use-package org-download
  :after org
  :defer nil
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/journal/_resources")
  (org-download-heading-lvl 0)
  (org-download-timestamp "org_%Y%m%d-%H%M%S_")
  (org-image-actual-width 900)
  (org-download-screenshot-method "xclip -selection clipboard -t image/png -o > '%s'")
  :bind
  ("C-M-y" . org-download-screenshot)
  :config
  (require 'org-download))

#+end_src
* SENSIBLE DEFAULTS
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
#+end_src
* Evil Mode
** Installed with package-install
** Code
#+begin_src emacs-lisp
(global-set-key (kbd "C-z") 'evil-mode)
;;(define-key evil-normal-state-map (kbd "C-z") 'evil-mode)
#+end_src
